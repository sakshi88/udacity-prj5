version: 2.1

jobs:
  lint-build:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install application dependencies
          command: |
            python3 -m venv devops
            . devops/bin/activate
            make install
      - run:
          name: lint application code
          command: |
            . devops/bin/activate
            make lint
      - save_cache:
          paths:
            - ./devops
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  build-upload-docker:
    docker:
      - image: circleci/golang:1.15

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build docker image 
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      - run:
          name: Upload image to Dockerhub
          command: |
            echo "Uploading docker Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            echo "Uploaded successfully!!!"

  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install necessary dependencies
          command: yum install -y tar gzip
      - run:
          name: Create VPC and subnets
          command: aws cloudformation deploy --template-file cloudformation/vpc/vpc.yml --tags project=${ENVIRONMENT_NAME} --stack-name "${ENVIRONMENT_NAME}-eks-vpc" --region ${AWS_DEFAULT_REGION} --parameter-overrides file://cloudformation/vpc/vpc-parameters.json
      - run:
          name: Create Cluster
          command: aws cloudformation deploy --template-file cloudformation/cluster/eksCluster.yml --tags project=${ENVIRONMENT_NAME} --stack-name "${ENVIRONMENT_NAME}-eks-cluster" --region ${AWS_DEFAULT_REGION} --parameter-overrides file://cloudformation/cluster/eksCluster-parameters.json --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Create nodeGroup
          command: |
            aws cloudformation deploy --template-file cloudformation/nodeGroup/nodeGroup.yml --tags project=${ENVIRONMENT_NAME} --stack-name "${ENVIRONMENT_NAME}-eks-nodeGroup" --region ${AWS_DEFAULT_REGION} --parameter-overrides file://cloudformation/nodeGroup/nodeGroup-parameters.json --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Create management nodes
          command: |
            aws cloudformation deploy --template-file cloudformation/managementNode/managementNode.yml --tags project=${ENVIRONMENT_NAME} --stack-name "${ENVIRONMENT_NAME}-eks-managementNode" --region ${AWS_DEFAULT_REGION} --parameter-overrides file://cloudformation/managementNode/managementNode-parameters.json --output text >> ~/deploymentStatus.txt
            echo "Contents of deploymentStatus.txt"
            cat ~/deploymentStatus.txt
      - run:
          name: Extract IPs of management nodes
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances --region "${AWS_DEFAULT_REGION}" --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" --output text >> ~/inventory.txt
            echo "Contents of inventory.txt"
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - deploymentStatus.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "bb:d2:5e:32:22:1a:c6:05:bb:bf:eb:bd:ca:d4:3d:7d"
      - attach_workspace:
          at: ~/
      - run:
          name: Install application dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure app server
          command: |
            if grep -q "No changes to deploy" ~/deploymentStatus.txt
              then
                cat ~/inventory.txt
                echo "app server configured already"
              else
                echo "Contents of inventory.txt are"
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configureServer.yml
              fi
  
  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "21:81:58:de:3e:43:350:6f:73:26:d3:25:aa:87:b1:8c"
      - attach_workspace:
          at: ~/
      - run:
          name: Install application dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure cluster node
          command: |
            if grep -q "No changes to deploy" ~/deploymentStatus.txt
              then
                cat ~/inventory.txt
                echo "Our cluster node is already configured."
              else
                echo "Contents of inventory.txt are"
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
              fi
      - run:
          name: Wait for LoadBalancer's to become reachable
          command: |
            if grep -q "No changes to deploy" ~/deploymentStatus.txt
              then
                cat ~/inventory.txt
                echo "Our cluster node is already configured."
              else
                echo "Contents of inventory.txt are"
                cat ~/inventory.txt
                echo "Wait for 60 seconds..."
                sleep 60
              fi
      - run:
          name: Save LoadBalancer's DNS name
          command: |
            echo "Contents of inventory.txt are"
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt save-elb-dns.yml
            echo "Contents of elb_dns.txt are"
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt
  
  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "bb:d2:5e:32:22:1a:c6:05:bb:bf:eb:bd:ca:d4:3d:7d"
      - attach_workspace:
          at: ~/
      - run:
          name: Install application dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy Docker Image
          command: |
            echo "Contents of inventory.txt are-"
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt deploy-appImage.yml
          no_output_timeout: 2m

workflows:
  default:
    jobs:
    - lint-build
    - build-upload-docker:
          requires:
            - lint-build
    - create-infrastructure:
          requires:
            - build-upload-docker 
    - configure-infrastructure:
          requires:
            - create-infrastructure
    - configure-cluster:
          requires:
            - configure-infrastructure
    - deploy-docker:
          requires:
            - configure-cluster
